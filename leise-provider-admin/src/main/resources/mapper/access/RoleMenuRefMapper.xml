<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.leise.provider.admin.model.access.mapper.RoleMenuRefMapper">
	<resultMap id="BaseResultMap" type="com.leise.provider.admin.model.access.entity.RoleMenuRef">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="role_id" jdbcType="BIGINT" property="roleId" />
		<result column="menu_id" jdbcType="BIGINT" property="menuId" />
		<result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
		<result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
		<result column="valid_status" jdbcType="BIT" property="validStatus" />
	</resultMap>
	<sql id="Base_Column_List">
		id, role_id, menu_id, create_time, modify_time, valid_status
	</sql>
	<select id="searchByRoleIds" parameterType="java.util.List" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from role_menu_ref where role_id in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from role_menu_ref
		where id = #{id,jdbcType=BIGINT}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from role_menu_ref
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<insert id="insert" parameterType="com.leise.provider.admin.model.access.entity.RoleMenuRef">
		insert into role_menu_ref (id, role_id, menu_id,
		create_time, modify_time,
		valid_status
		)
		values (#{id,jdbcType=BIGINT}, #{roleId,jdbcType=BIGINT}, #{menuId,jdbcType=BIGINT},
		#{createTime,jdbcType=TIMESTAMP}, #{modifyTime,jdbcType=TIMESTAMP}, #{validStatus,jdbcType=BIT}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.leise.provider.admin.model.access.entity.RoleMenuRef">
		insert into role_menu_ref
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="roleId != null">
				role_id,
			</if>
			<if test="menuId != null">
				menu_id,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
			<if test="modifyTime != null">
				modify_time,
			</if>
			<if test="validStatus != null">
				valid_status,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=BIGINT},
			</if>
			<if test="roleId != null">
				#{roleId,jdbcType=BIGINT},
			</if>
			<if test="menuId != null">
				#{menuId,jdbcType=BIGINT},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="modifyTime != null">
				#{modifyTime,jdbcType=TIMESTAMP},
			</if>
			<if test="validStatus != null">
				#{validStatus,jdbcType=BIT},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.leise.provider.admin.model.access.entity.RoleMenuRef">
		update role_menu_ref
		<set>
			<if test="roleId != null">
				role_id = #{roleId,jdbcType=BIGINT},
			</if>
			<if test="menuId != null">
				menu_id = #{menuId,jdbcType=BIGINT},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="modifyTime != null">
				modify_time = #{modifyTime,jdbcType=TIMESTAMP},
			</if>
			<if test="validStatus != null">
				valid_status = #{validStatus,jdbcType=BIT},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.leise.provider.admin.model.access.entity.RoleMenuRef">
		update role_menu_ref
		set role_id = #{roleId,jdbcType=BIGINT},
		menu_id = #{menuId,jdbcType=BIGINT},
		create_time = #{createTime,jdbcType=TIMESTAMP},
		modify_time =
		#{modifyTime,jdbcType=TIMESTAMP},
		valid_status = #{validStatus,jdbcType=BIT}
		where id = #{id,jdbcType=BIGINT}
	</update>
</mapper>